// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (
  user_id,
  name,
  type,
  balance
) VALUES ($1, $2, $3, $4)
`

type CreateAccountParams struct {
	UserID  uuid.UUID     `json:"user_id"`
	Name    string        `json:"name"`
	Type    string        `json:"type"`
	Balance pgtype.Float8 `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount,
		arg.UserID,
		arg.Name,
		arg.Type,
		arg.Balance,
	)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, user_id, name, type, balance, created_at, updated_at FROM accounts WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (*Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Type,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAccountsByUserId = `-- name: GetAccountsByUserId :many
SELECT id, user_id, name, type, balance, created_at, updated_at FROM accounts WHERE user_id = $1
`

func (q *Queries) GetAccountsByUserId(ctx context.Context, userID uuid.UUID) ([]*Account, error) {
	rows, err := q.db.Query(ctx, getAccountsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Type,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
SET name = $2,
    type = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateAccountParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Type string    `json:"type"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount, arg.ID, arg.Name, arg.Type)
	return err
}
