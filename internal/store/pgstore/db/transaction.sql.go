// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
insert into transactions (
  description,
  amount,
  date,
  type,
  user_id,
  account_id,
  category_id
)
values ($1, $2, $3, $4, $5, $6, $7)
`

type CreateTransactionParams struct {
	Description string          `json:"description"`
	Amount      float64         `json:"amount"`
	Date        pgtype.Date     `json:"date"`
	Type        TransactionType `json:"type"`
	UserID      uuid.UUID       `json:"user_id"`
	AccountID   uuid.UUID       `json:"account_id"`
	CategoryID  uuid.UUID       `json:"category_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.Description,
		arg.Amount,
		arg.Date,
		arg.Type,
		arg.UserID,
		arg.AccountID,
		arg.CategoryID,
	)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
delete from transactions
 where id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getAllTransactions = `-- name: GetAllTransactions :many
select id, description, amount, date, type, account_id, category_id, user_id, created_at, updated_at
  from transactions
 where user_id = $1
`

func (q *Queries) GetAllTransactions(ctx context.Context, userID uuid.UUID) ([]*Transaction, error) {
	rows, err := q.db.Query(ctx, getAllTransactions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.Date,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTransactionsByAccount = `-- name: GetAllTransactionsByAccount :many
select id, description, amount, date, type, account_id, category_id, user_id, created_at, updated_at
  from transactions
 where account_id = $1
`

func (q *Queries) GetAllTransactionsByAccount(ctx context.Context, accountID uuid.UUID) ([]*Transaction, error) {
	rows, err := q.db.Query(ctx, getAllTransactionsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.Date,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTransactionsByCategory = `-- name: GetAllTransactionsByCategory :many
select id, description, amount, date, type, account_id, category_id, user_id, created_at, updated_at
  from transactions
 where category_id = $1
`

func (q *Queries) GetAllTransactionsByCategory(ctx context.Context, categoryID uuid.UUID) ([]*Transaction, error) {
	rows, err := q.db.Query(ctx, getAllTransactionsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.Date,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrasaction = `-- name: GetTrasaction :one
select id, description, amount, date, type, account_id, category_id, user_id, created_at, updated_at
  from transactions
 where id = $1
`

func (q *Queries) GetTrasaction(ctx context.Context, id uuid.UUID) (*Transaction, error) {
	row := q.db.QueryRow(ctx, getTrasaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.Date,
		&i.Type,
		&i.AccountID,
		&i.CategoryID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateTransaction = `-- name: UpdateTransaction :exec
update transactions
   set description = $2,
   amount = $3,
   date = $4,
   type = $5,
   updated_at = now()
 where id = $1
`

type UpdateTransactionParams struct {
	ID          uuid.UUID       `json:"id"`
	Description string          `json:"description"`
	Amount      float64         `json:"amount"`
	Date        pgtype.Date     `json:"date"`
	Type        TransactionType `json:"type"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.Exec(ctx, updateTransaction,
		arg.ID,
		arg.Description,
		arg.Amount,
		arg.Date,
		arg.Type,
	)
	return err
}
