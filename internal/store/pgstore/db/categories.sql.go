// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :exec
insert into categories (
  name,
  type,
  user_id
)
values ($1, $2, $3)
`

type CreateCategoryParams struct {
	Name   string          `json:"name"`
	Type   TransactionType `json:"type"`
	UserID uuid.UUID       `json:"user_id"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory, arg.Name, arg.Type, arg.UserID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
delete from categories
 where id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getAllCategoriesByUserId = `-- name: GetAllCategoriesByUserId :many
select id, name, type, user_id, created_at, updated_at
  from categories
 where user_id = $1
`

func (q *Queries) GetAllCategoriesByUserId(ctx context.Context, userID uuid.UUID) ([]*Category, error) {
	rows, err := q.db.Query(ctx, getAllCategoriesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
select id, name, type, user_id, created_at, updated_at
  from categories
 where id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (*Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateCategory = `-- name: UpdateCategory :exec
update categories
   set name = $2,
       type = $3,
       updated_at = now()
 where id = $1
`

type UpdateCategoryParams struct {
	ID   uuid.UUID       `json:"id"`
	Name string          `json:"name"`
	Type TransactionType `json:"type"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory, arg.ID, arg.Name, arg.Type)
	return err
}
